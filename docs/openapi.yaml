openapi: "3.0.0"
info:
  title: コミック読書管理API仕様書
  version: 1.0.0
  description: SwaggerによるComicLogAPI仕様書です
servers:
  - url: http://localhost:8080
tags:
  - name: comiclogs
    description: コミック読書管理に関する操作

paths:
  /comiclogs:
    get:
      tags:
        - comiclogs
      summary: "コミック読書情報の取得"
      description: "クエリパラメータで入力された条件に合致する項目を取得する。条件を入力しない場合は全ての条件を取得する"
      parameters:
        - name: comicServiceName
          in: query
          description: 入力した文字が含まれるコミックサービス名が検索される
          schema:
            type: string
          example: コミックシーモア
        - name: comicTitle
          in: query
          description: 入力した文字が含まれるコミックタイトルが検索される
          schema:
            type: string
          example: 鬼滅の刃
        - name: volumes
          in: query
          description: 入力した数字が含まれる巻数が検索される
          schema:
            type: integer
          example: 23
        - name: status
          in: query
          description: 入力した状態に該当する状況が検索される
          schema:
            type: string
            enum:
              - 続
              - 完結
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComicType1'

    post:
      tags:
        - comiclogs
      summary: "コミック情報の登録"
      description: "新しいコミック情報を登録する"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComicType2'
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "successfully created"

  /comiclogs/{id}:
    get:
      tags:
        - comiclogs
      summary: "特定のコミック情報の取得"
      description: "指定したIDのコミック情報を取得する"
      parameters:
        - name: id
          in: path
          description: 取得したいコミック情報のID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComicType2'
        "404":
          description: "Resource not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "resource not found"
    patch:
      tags:
        - comiclogs
      summary: "コミック情報の更新"
      description: "指定したIDのコミック情報を更新する"
      parameters:
        - name: "id"
          in: "path"
          description: 更新したいコミック情報のID
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComicType2'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "successfully updated"
        "404":
          description: "Resource not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "resource not found"
    delete:
      tags:
        - comiclogs
      summary: "コミック情報の削除"
      description: "指定したIDのコミック情報を削除する"
      parameters:
        - name: "id"
          in: "path"
          description: 削除したいコミック情報のID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "successfully deleted"
  
components:
  schemas:
    ComicType1:
      type: object
      properties:
        id:
          type: integer
          example: 1
        comicServiceName:
          type: string
          example: "コミックシーモア"
        comicTitle:
          type: string
          example: "鬼滅の刃"
        volumes:
          type: integer
          example: 23
        status:
          type: string
          example: "完結"

    ComicType2:
      type: object
      properties:
        comicServiceName:
          type: string
          example: "コミックシーモア"
        comicTitle:
          type: string
          example: "鬼滅の刃"
        volumes:
          type: integer
          example: 23
        status:
          type: string
          example: "完結"